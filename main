import time
import pandas as pd
import numpy as np
import calendar

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    print("Which city would you like to view it's data? is it chicago or washington or new york city")
    city = input().lower()
    while city != 'chicago' and city != 'washington' and city != 'new york city':
        print("please enter a valid city")
        city = input().lower()

    # get user input for month (all, january, february, ... , june)
    print("enter the month number you wish to filter by eg: 1 for January, type 13 if you don't wish to filter by month")
    month_int = int(input()) # none is 13
    day = 8
    while month_int >= 14 or month_int <= 0:
        print("please enter a valid number")
        month_int = int(input())

    # get user input for day of week (all, monday, tuesday, ... sunday)
    if month_int >= 13:
        print("please enter the day's number you want to filter by where Monday is 1 and Sunday is 7 and none is 8")
        day = int(input()) # none is 8
        while day >= 13 or day <= 0:
            print("please enter valid day")
            day = int(input())


    print('-'*40)
    return city, month_int, day


CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def load_data(city, month_int, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """

    # load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    print(df.head(8))
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name

    # filter by month if applicable
    if month_int != 13:
        df = df[df['month'] == month_int]
        print(df.head(8))
    # filter by day of week if applicable
    if day != 8:
        # filter by day of week to create the new dataframe is not working
        day_name = calendar.day_name[day-1]
        df = df[df['day_of_week'] == day_name.title()]
        print(df.head(8))
    return df


def time_stats(df,month,day):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    # convert the Start Time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # display the most common month is working
    if month == 13:
        df['month'] = df['Start Time'].dt.month
        popular_month = df['month'].mode()[0]
        print("Most Popular Month is: ", popular_month)
    # display the most common day of week is not working
    # if day == 8:
    #     df['day'] = df['Start Time'].dt.day_name
    #     popular_day = df['day'].mode()[0]
    #     print("Most Popular day is: ", popular_day)

    # display the most common start hour is working
    # extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour
    # find the most popular hour
    popular_hour = df['hour'].mode()[0]

    print('Most Popular Start Hour:', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip. and it is DONE"""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print("The most popular start station is: ", popular_start_station)

    # display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    print("The most popular end station is: ", popular_end_station)

    # display most frequent combination of start station and end station trip
    combo = (df['Start Station'] + ' To ' + df['End Station']).mode()[0]
    print("most common combination is {} ".format(combo))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time


    # display mean travel time


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city): # works
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)
    # Display counts of gender
    if city != 'washington':
        gender_type = df['Gender'].value_counts()
        print(gender_type)

        # Display earliest, most recent, and most common year of birth
        oldest = df['Birth Year'].min()
        recent = df['Birth Year'].max()
        common = df['Birth Year'].mode()[0]
        print("oldest is {} and youngest is {} and the most frequent is {} \n".format(oldest, recent, common))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df,month,day)
        station_stats(df)
        #       trip_duration_stats(df)
        user_stats(df, city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
