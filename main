import pandas as pd
import numpy as np
import calendar
import time

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv'}

months_in_year = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',
                      'November', 'December', 'all']
days_in_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', 'all']


def get_filters(): # works
    start_time = time.time()
    city = input("please enter city\n").lower()
    while city != 'chicago' and city != 'new york city' and city != 'washington':
        city = input("please enter correct city name\n").lower()
    print("the city is {}".format(city))
    print("this database only contains the first 6 months of the year\n")
    month_int = int(input("Enter the month to filter by where 1 is january and 6 is June and 7 is all months\n"))
    while month_int <= 0 or month_int >= 8:
        month_int = int(input("please enter correct month\n"))
    month = months_in_year[month_int-1]
    print("the month is {}\n".format(month))
    if month_int == 7:
        day_int = int(input("enter day of the week to filter by where 1 is monday and 7 is sunday and none is 8\n"))
        while day_int <= 0 or day_int >= 9:
            day_int = int(input("please enter valid day\n"))
        day_name = days_in_week[day_int - 1]
    else:
        day_int = 8
        day_name = 'all'
    print("the name of the day chosen is {}\n".format(day_name))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    return city, month_int, day_int


def load_data(city, month, day): # works
    start_time = time.time()
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    if month != 7:
        df = df[df['Start Time'].dt.month == month]
    if day != 8:
        df = df[df['Start Time'].dt.weekday+1 == day]
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    return df


def time_stats(df, month, day): # works
    start_time = time.time()
    if month == 7:
        df['month'] = df['Start Time'].dt.month
        popular_month = df['month'].mode()[0]
        print("Most Popular Month is: ", popular_month)
    if day == 8:
        # df['day'] = df['Start Time'].dt.isocalendar().day
        df['day'] = df['Start Time'].dt.dayofweek
        popular_day = df['day'].mode()[0]
        print("Most Popular day is: ", days_in_week[popular_day])
    df['hour'] = df['Start Time'].dt.hour
    # find the most popular hour
    popular_hour = df['hour'].mode()[0]

    print('Most Popular Start Hour:', popular_hour)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df): # works
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    popular_start_station = df['Start Station'].mode()[0]
    print("The most popular start station is: ", popular_start_station)

    # display most commonly used end station
    popular_end_station = df['End Station'].mode()[0]
    print("The most popular end station is: ", popular_end_station)

    # display most frequent combination of start station and end station trip
    combo = (df['Start Station'] + ' To ' + df['End Station'])
    combo = combo.mode()[0]
    print("most common combination is {} ".format(combo))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df): # works
    start_time = time.time()
    total_travel_time = df['Trip Duration'].sum()
    print("the total travelling time is: {} seconds\n".format(total_travel_time))
    average_travel_time = df['Trip Duration'].mean()
    print("the Average travel time is {} seconds\n".format(average_travel_time))
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city): # works
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types = df['User Type'].value_counts()
    print(user_types)
    # Display counts of gender
    if city != 'washington':
        gender_type = df['Gender'].value_counts()
        print(gender_type)

        # Display earliest, most recent, and most common year of birth
        oldest = df['Birth Year'].min()
        recent = df['Birth Year'].max()
        common = df['Birth Year'].mode()[0]
        print("oldest is {} and youngest is {} and the most frequent is {} \n".format(oldest, recent, common))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:

        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df, month, day)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
